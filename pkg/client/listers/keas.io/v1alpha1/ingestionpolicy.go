// Auto-generated for github.com/projectkeas/crds
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/projectkeas/crds/pkg/apis/keas.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IngestionPolicyLister helps list IngestionPolicies.
// All objects returned here must be treated as read-only.
type IngestionPolicyLister interface {
	// List lists all IngestionPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IngestionPolicy, err error)
	// IngestionPolicies returns an object that can list and get IngestionPolicies.
	IngestionPolicies(namespace string) IngestionPolicyNamespaceLister
	IngestionPolicyListerExpansion
}

// ingestionPolicyLister implements the IngestionPolicyLister interface.
type ingestionPolicyLister struct {
	indexer cache.Indexer
}

// NewIngestionPolicyLister returns a new IngestionPolicyLister.
func NewIngestionPolicyLister(indexer cache.Indexer) IngestionPolicyLister {
	return &ingestionPolicyLister{indexer: indexer}
}

// List lists all IngestionPolicies in the indexer.
func (s *ingestionPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.IngestionPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngestionPolicy))
	})
	return ret, err
}

// IngestionPolicies returns an object that can list and get IngestionPolicies.
func (s *ingestionPolicyLister) IngestionPolicies(namespace string) IngestionPolicyNamespaceLister {
	return ingestionPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IngestionPolicyNamespaceLister helps list and get IngestionPolicies.
// All objects returned here must be treated as read-only.
type IngestionPolicyNamespaceLister interface {
	// List lists all IngestionPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IngestionPolicy, err error)
	// Get retrieves the IngestionPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IngestionPolicy, error)
	IngestionPolicyNamespaceListerExpansion
}

// ingestionPolicyNamespaceLister implements the IngestionPolicyNamespaceLister
// interface.
type ingestionPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IngestionPolicies in the indexer for a given namespace.
func (s ingestionPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IngestionPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngestionPolicy))
	})
	return ret, err
}

// Get retrieves the IngestionPolicy from the indexer for a given namespace and name.
func (s ingestionPolicyNamespaceLister) Get(name string) (*v1alpha1.IngestionPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ingestionpolicy"), name)
	}
	return obj.(*v1alpha1.IngestionPolicy), nil
}
